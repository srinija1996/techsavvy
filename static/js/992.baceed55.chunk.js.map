{"version":3,"file":"static/js/992.baceed55.chunk.js","mappings":"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","sources":["components/SelectMenu/index.tsx","utils/valueFormatter.ts","pages/Dashboard/PerformanceChart/index.tsx","utils/colorMapping.ts","components/SkeletonComponent/index.js","pages/Dashboard/HeatMap/index.tsx","pages/Dashboard/index.tsx","utils/apiManager.ts","services/index.ts"],"sourcesContent":["import {\r\n  Box,\r\n  Button,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport ExpandMoreOutlinedIcon from \"@mui/icons-material/ExpandMoreOutlined\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getMetricsList } from \"../../services\";\r\nimport { AxiosResponse } from \"axios\";\r\nimport { SelectMenuProps } from \"../../interfaces\";\r\n\r\nconst SelectMenu = ({\r\n  setSelectedCategories,\r\n  selectedCategories,\r\n  onSetData,\r\n  isLoading,\r\n}: SelectMenuProps) => {\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const [metricsList, setMetricsList] = useState([]);\r\n  const [temporarySelectedCategories, setTemporarySelectedCategories] =\r\n    useState(selectedCategories);\r\n  const open = Boolean(anchorEl);\r\n\r\n  useEffect(() => {\r\n    getMetricsList()\r\n      .then((response: AxiosResponse) => {\r\n        setMetricsList(response?.data?.result);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const onChangeCategories = (checked: boolean, item: string) => {\r\n    setTemporarySelectedCategories((prevState: string[]) => {\r\n      if (prevState.some((selected: string) => selected === item)) {\r\n        return prevState.filter((selected: string) => selected !== item);\r\n      } else {\r\n        return [...prevState, item];\r\n      }\r\n    });\r\n  };\r\n\r\n  const onApplyCategories = async () => {\r\n    setSelectedCategories(temporarySelectedCategories);\r\n    onSetData(temporarySelectedCategories);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        <IconButton\r\n          onClick={handleClick}\r\n          size=\"small\"\r\n          aria-controls={open ? \"account-menu\" : undefined}\r\n          aria-haspopup=\"true\"\r\n          aria-expanded={open ? \"true\" : undefined}\r\n          sx={{\r\n            border: \"solid 1px #c9c4c4\",\r\n            borderRadius: \"8px\",\r\n            p: \"10px\",\r\n          }}\r\n        >\r\n          <Typography>Select Metrics</Typography>\r\n          <ExpandMoreOutlinedIcon />\r\n        </IconButton>\r\n      </Box>\r\n      <Menu\r\n        anchorEl={anchorEl}\r\n        id=\"account-menu\"\r\n        open={open}\r\n        onClose={handleClose}\r\n        PaperProps={{\r\n          elevation: 0,\r\n          sx: {\r\n            overflow: \"visible\",\r\n            filter: \"drop-shadow(0px 2px 8px rgba(0,0,0,0.32))\",\r\n            mt: 1.5,\r\n            p: 1.5,\r\n            \"& .MuiAvatar-root\": {\r\n              width: 32,\r\n              height: 32,\r\n              ml: -0.5,\r\n              mr: 1,\r\n            },\r\n            \"&::before\": {\r\n              content: '\"\"',\r\n              display: \"block\",\r\n              position: \"absolute\",\r\n              top: 0,\r\n              right: 14,\r\n              width: 10,\r\n              height: 10,\r\n              bgcolor: \"background.paper\",\r\n              transform: \"translateY(-50%) rotate(45deg)\",\r\n              zIndex: 0,\r\n            },\r\n          },\r\n        }}\r\n        transformOrigin={{ horizontal: \"right\", vertical: \"top\" }}\r\n        anchorOrigin={{ horizontal: \"right\", vertical: \"bottom\" }}\r\n      >\r\n        {metricsList?.map((item: { label: string; code: string }) => (\r\n          <MenuItem sx={{ p: 0 }} key={item.code}>\r\n            <FormControlLabel\r\n              control={<Checkbox name=\"basic-checkbox\" />}\r\n              checked={temporarySelectedCategories.some(\r\n                (selected) => selected === item.code\r\n              )}\r\n              sx={{ width: \"100%\", m: 0 }}\r\n              label={item?.label}\r\n              onChange={(event: React.SyntheticEvent, checked: boolean) =>\r\n                onChangeCategories(checked, item.code)\r\n              }\r\n            />\r\n          </MenuItem>\r\n        ))}\r\n        <Box display=\"flex\" justifyContent=\"space-around\">\r\n          <Button\r\n            variant=\"contained\"\r\n            sx={{\r\n              backgroundColor: \"#f1f1f1\",\r\n              color: \"black\",\r\n              textTransform: \"capitalize\",\r\n            }}\r\n            size=\"small\"\r\n            onClick={handleClose}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            sx={{ textTransform: \"capitalize\" }}\r\n            size=\"large\"\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              onApplyCategories();\r\n              handleClose();\r\n            }}\r\n            disabled={isLoading}\r\n          >\r\n            Apply\r\n          </Button>\r\n        </Box>\r\n      </Menu>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SelectMenu;\r\n","export const valueFormatter = (name: string, v: number) => {\r\n  const numbersMetrics = [\"Impressions\", \"Clicks\", \"Orders\", \"ROAS\", \"RPC\"];\r\n  const currencyMetrics = [\r\n    \"Spend\",\r\n    \"Revenue\",\r\n    \"AOV\",\r\n    \"CPM\",\r\n    \"CPC\",\r\n    \"CPA\",\r\n    \"CPO\",\r\n  ];\r\n  const percentageMetrics = [\"CTR\", \"CR_perc\", \"ACOS\"];\r\n\r\n  switch (true) {\r\n    case currencyMetrics.includes(name):\r\n      return `₹${v.toFixed(2)}`;\r\n    case percentageMetrics.includes(name):\r\n      return `${v.toFixed(2)}%`;\r\n    default:\r\n      return v.toFixed(2);\r\n  }\r\n};\r\n","import { Box, Divider, Typography } from \"@mui/material\";\r\nimport { LineChart } from \"@mui/x-charts\";\r\n\r\nimport SelectMenu from \"../../../components/SelectMenu\";\r\nimport { getTodaysTime, timeFormatter } from \"../../../utils/dates\";\r\nimport { PerformanceListProps } from \"../../../interfaces\";\r\nimport { valueFormatter } from \"../../../utils/valueFormatter\";\r\nimport { useContext } from \"react\";\r\nimport { AppContext } from \"../../../App\";\r\n\r\nconst PerformanceChart = ({\r\n  selectedCategories,\r\n  setSelectedCategories,\r\n  onSetData,\r\n  data,\r\n  isLoading,\r\n}: PerformanceListProps) => {\r\n  const context = useContext(AppContext);\r\n  return (\r\n    <Box\r\n      sx={{\r\n        backgroundColor: \"white\",\r\n        borderRadius: \"8px\",\r\n      }}\r\n    >\r\n      <Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"space-between\" px={2}>\r\n        <Box sx={{ padding: \"10px\" }}>\r\n          <Typography>Performance Chart</Typography>\r\n          <Typography sx={{ color: \"gray\" }} variant=\"caption\">\r\n            Key Metrics for Dayparting Schedule Performance Evaluation\r\n          </Typography>\r\n        </Box>\r\n        <SelectMenu\r\n          setSelectedCategories={setSelectedCategories}\r\n          selectedCategories={selectedCategories}\r\n          onSetData={onSetData}\r\n          isLoading={isLoading}\r\n        />\r\n      </Box>\r\n      <Divider />\r\n      <Box ref={context?.appRef}>\r\n        <LineChart\r\n          series={data?.series?.map((line: any) => ({\r\n            ...line,\r\n            label: line.name,\r\n            area: true,\r\n            valueFormatter: (v: any) =>\r\n              v === null ? \"\" : valueFormatter(line?.name, v),\r\n          }))}\r\n          loading={data?.isLoading}\r\n          xAxis={[\r\n            {\r\n              data: data?.categories?.map((time: string) =>\r\n                getTodaysTime(time)\r\n              ),\r\n              scaleType: \"point\",\r\n              valueFormatter: timeFormatter,\r\n              disableTicks: true,\r\n            },\r\n          ]}\r\n          yAxis={[\r\n            {\r\n              disableLine: true,\r\n              disableTicks: true,\r\n              valueFormatter: (value: number) =>\r\n                value > 1000\r\n                  ? `₹${(value / 1000).toFixed(1)}k`\r\n                  : `₹${value.toFixed(1)}`,\r\n            },\r\n          ]}\r\n          height={500}\r\n          grid={{ horizontal: true }}\r\n          legend={{ hidden: true }}\r\n          sx={{\r\n            \"& .MuiChartsGrid-horizontalLine\": {\r\n              strokeDasharray: \"10 5\",\r\n              strokeWidth: 1,\r\n            },\r\n            \"& .MuiAreaElement-root\": {\r\n              opacity: 0.02,\r\n            },\r\n            \"& .css-6i3py-MuiChartsSurface-root\": {\r\n              overflow: \"scroll\",\r\n            },\r\n            p: 2,\r\n            m: 0,\r\n          }}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PerformanceChart;\r\n","import { ColorMappingProps } from \"../interfaces\";\r\n\r\nfunction hexToRgb(hex: string): [number, number, number] {\r\n  let r: number, g: number, b: number;\r\n  if (hex.length === 4) {\r\n    r = parseInt(hex[1] + hex[1], 16);\r\n    g = parseInt(hex[2] + hex[2], 16);\r\n    b = parseInt(hex[3] + hex[3], 16);\r\n  } else if (hex.length === 7) {\r\n    r = parseInt(hex[1] + hex[2], 16);\r\n    g = parseInt(hex[3] + hex[4], 16);\r\n    b = parseInt(hex[5] + hex[6], 16);\r\n  } else {\r\n    throw new Error(\"Invalid HEX color\");\r\n  }\r\n  return [r, g, b];\r\n}\r\n\r\nfunction rgbToHex(r: number, g: number, b: number): string {\r\n  return (\r\n    \"#\" +\r\n    [r, g, b]\r\n      .map((x) => {\r\n        const hex = x.toString(16);\r\n        return hex.length === 1 ? \"0\" + hex : hex;\r\n      })\r\n      .join(\"\")\r\n  );\r\n}\r\n\r\nexport const colorMapping = ({\r\n  index,\r\n  value,\r\n  minValue,\r\n  maxValue,\r\n  reverse,\r\n}: ColorMappingProps) => {\r\n  index = index > 5 ? index % 5 : index;\r\n  const colourPairs = [\r\n    { maxColor: \"#bfadf3\", minColor: \"#ede8fc\" },\r\n    { maxColor: \"#ffbfeb\", minColor: \"#ffeaf8\" },\r\n    { maxColor: \"#16abd4\", minColor: \"#aee7f7\" },\r\n    { maxColor: \"#f1c9a6\", minColor: \"#f1e1d3\" },\r\n    { maxColor: \"#edeb88\", minColor: \"#e5e5c3\" },\r\n    { maxColor: \"#c1c6bc\", minColor: \"#eaeee6\" },\r\n  ];\r\n  const minColor = reverse\r\n    ? colourPairs[index].maxColor\r\n    : colourPairs[index].minColor;\r\n  const maxColor = reverse\r\n    ? colourPairs[index].minColor\r\n    : colourPairs[index].maxColor;\r\n\r\n  const [r1, g1, b1] = hexToRgb(minColor);\r\n  const [r2, g2, b2] = hexToRgb(maxColor);\r\n\r\n  const ratio = (value - minValue) / (maxValue - minValue);\r\n\r\n  const r = Math.round(r1 + (r2 - r1) * ratio);\r\n  const g = Math.round(g1 + (g2 - g1) * ratio);\r\n  const b = Math.round(b1 + (b2 - b1) * ratio);\r\n\r\n  return rgbToHex(r, g, b);\r\n};\r\n","import {\r\n  Skeleton,\r\n  Table,\r\n  TableCell,\r\n  TableContainer,\r\n  TableRow,\r\n} from \"@mui/material\";\r\n\r\nconst rows = [1, 2, 3, 4, 5];\r\nconst columns = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\nconst SkeletonComponent = () => (\r\n  <TableContainer>\r\n    <Table>\r\n      {rows.map(() => (\r\n        <TableRow>\r\n          {columns.map(() => (\r\n            <TableCell colSpan={1} sx={{ p: 0, border: \"solid 3px white\" }}>\r\n              <Skeleton\r\n                sx={{ bgcolor: \"grey.900\" }}\r\n                variant=\"rectangular\"\r\n                width=\"80px\"\r\n                height=\"35px\"\r\n              />\r\n            </TableCell>\r\n          ))}\r\n        </TableRow>\r\n      ))}\r\n    </Table>\r\n  </TableContainer>\r\n);\r\n\r\nexport default SkeletonComponent;\r\n","import {\r\n  Box,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport { HeatMapListProps } from \"../../../interfaces\";\r\nimport { colorMapping } from \"../../../utils/colorMapping\";\r\nimport { timeInAMPM } from \"../../../utils/dates\";\r\nimport { Suspense, useContext, useEffect } from \"react\";\r\nimport { AppContext } from \"../../../App\";\r\nimport { valueFormatter } from \"../../../utils/valueFormatter\";\r\nimport Skeleton from \"../../../components/SkeletonComponent\";\r\nimport SkeletonComponent from \"../../../components/SkeletonComponent\";\r\n\r\nconst getList = (obj: any) => {\r\n  return Object.keys(obj).filter((key) => ![\"show\", \"time_part\"].includes(key));\r\n};\r\n\r\nconst HeatMapComponent = ({\r\n  heatMapData,\r\n  selectedCategories,\r\n}: HeatMapListProps) => {\r\n  const { data, rangeDetails, isLoading } = heatMapData;\r\n  const context = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    if (context) {\r\n      const { mainContentRef, setMainContentHeight } = context;\r\n      setMainContentHeight(mainContentRef?.current?.scrollHeight);\r\n    }\r\n  });\r\n  return (\r\n    <Box\r\n      sx={{\r\n        backgroundColor: \"white\",\r\n        borderRadius: \"8px\",\r\n        mt: \"10px\",\r\n      }}\r\n    >\r\n      <Box sx={{ padding: \"10px\" }}>\r\n        <Typography>Heat Map</Typography>\r\n        <Typography sx={{ color: \"gray\" }} variant=\"caption\">\r\n          Select Hours to schedule Dayparting\r\n        </Typography>\r\n      </Box>\r\n      <Box p={2}>\r\n        {isLoading || data?.length === 0 ? (\r\n          <Skeleton />\r\n        ) : (\r\n          <Suspense fallback={<SkeletonComponent />}>\r\n            <TableContainer sx={{ width: \"98%\" }}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell\r\n                      colSpan={1}\r\n                      sx={{ borderBottom: \"none\" }}\r\n                    ></TableCell>\r\n                    {data?.map((item) => (\r\n                      <TableCell\r\n                        size=\"small\"\r\n                        align=\"center\"\r\n                        colSpan={selectedCategories.length}\r\n                        sx={{ borderBottom: \"none\", color: \"gray\" }}\r\n                      >\r\n                        {item.weekday}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell\r\n                      sx={{ borderBottom: \"none\" }}\r\n                      size=\"small\"\r\n                      colSpan={1}\r\n                    ></TableCell>\r\n                    {data?.map(() =>\r\n                      selectedCategories.map((category) => (\r\n                        <TableCell size=\"small\" align=\"center\" colSpan={1}>\r\n                          {category}\r\n                        </TableCell>\r\n                      ))\r\n                    )}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {data[0]?.Hourly_Data.map((hourlyData: any, ind: any) => (\r\n                    <>\r\n                      <TableRow>\r\n                        <TableCell\r\n                          sx={{ border: \"none\", color: \"gray\" }}\r\n                          size=\"small\"\r\n                          align=\"left\"\r\n                          colSpan={1}\r\n                        >\r\n                          {timeInAMPM(data[0]?.Hourly_Data?.[ind]?.time_part)}\r\n                        </TableCell>\r\n                        {data?.map((item) => {\r\n                          return getList(item?.Hourly_Data[ind])?.map((key) => (\r\n                            <TableCell\r\n                              sx={{\r\n                                color: \"blue\",\r\n                                border: \"solid 3px white\",\r\n                                backgroundColor: colorMapping({\r\n                                  minValue: rangeDetails[key]?.min,\r\n                                  maxValue: rangeDetails[key]?.max,\r\n                                  index: selectedCategories.indexOf(key),\r\n                                  value: Number(item?.Hourly_Data[ind][key]),\r\n                                  reverse: [\r\n                                    \"CPC\",\r\n                                    \"CPM\",\r\n                                    \"CPO\",\r\n                                    \"ACOS\",\r\n                                    \"CPA\",\r\n                                  ].includes(key),\r\n                                }),\r\n                              }}\r\n                              size=\"small\"\r\n                              align=\"center\"\r\n                              colSpan={1}\r\n                            >\r\n                              {valueFormatter(key, item?.Hourly_Data[ind][key])}\r\n                            </TableCell>\r\n                          ));\r\n                        })}\r\n                      </TableRow>\r\n                    </>\r\n                  ))}\r\n                  <TableRow>\r\n                    <TableCell\r\n                      sx={{ fontWeight: 600 }}\r\n                      size=\"small\"\r\n                      align=\"left\"\r\n                      colSpan={1}\r\n                    >\r\n                      Total\r\n                    </TableCell>\r\n                    {heatMapData?.totalRow.flat().map((val: any) => (\r\n                      <TableCell\r\n                        sx={{\r\n                          fontWeight: 600,\r\n                          border: \"solid 3px white\",\r\n                          borderBottom: 0,\r\n                          backgroundColor: \"rgba(0, 0, 0, 0.12)\",\r\n                        }}\r\n                        size=\"small\"\r\n                        align=\"center\"\r\n                        colSpan={1}\r\n                      >\r\n                        {val.toFixed(2)}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Suspense>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default HeatMapComponent;\r\n","import { Box } from \"@mui/material\";\r\nimport { useEffect, useState } from \"react\";\r\nimport PerformanceChart from \"./PerformanceChart\";\r\nimport HeatMapComponent from \"./HeatMap\";\r\nimport { getHeatMapList, getPerformanceList } from \"../../services\";\r\nimport { DataProps } from \"../../interfaces\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst Dashboard = () => {\r\n  const [data, setData] = useState<DataProps>({\r\n    categories: [],\r\n    series: [],\r\n    isLoading: false,\r\n  });\r\n  const [HeatMapData, setHeatMapData] = useState({\r\n    data: [],\r\n    rangeDetails: {},\r\n    isLoading: false,\r\n    totalRow: [],\r\n  });\r\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([\r\n    \"CR_perc\",\r\n    \"ACOS\",\r\n    \"ROAS\",\r\n  ]);\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  useEffect(() => {\r\n    onSetData(selectedCategories);\r\n  }, [selectedCategories]);\r\n\r\n  const onSetData = async (selectedCategories: string[] | []) => {\r\n    setData((prevState) => ({\r\n      ...prevState,\r\n      isLoading: true,\r\n    }));\r\n    setHeatMapData((prevState) => ({\r\n      ...prevState,\r\n      isLoading: true,\r\n    }));\r\n    getPerformanceList({\r\n      metrics: selectedCategories,\r\n    })\r\n      .then((response) =>\r\n        setData((prevState) => ({\r\n          ...prevState,\r\n          ...response.data.result,\r\n        }))\r\n      )\r\n      .catch((err) => console.log(err))\r\n      .finally(() =>\r\n        setData((prevState) => ({\r\n          ...prevState,\r\n          isLoading: false,\r\n        }))\r\n      );\r\n    getHeatMapList({\r\n      metrics: selectedCategories,\r\n    })\r\n      .then((response) =>\r\n        setHeatMapData((prevState) => ({\r\n          ...prevState,\r\n          data: response.data.result,\r\n          rangeDetails: response.data.rangeDetails,\r\n          totalRow: response.data.result.map(() => {\r\n            const entriesList = Object.entries(response.data.result[0]).filter(\r\n              (entryItem) => entryItem[0].startsWith(\"Total\")\r\n            );\r\n            return entriesList.map((entry) => entry[1]);\r\n          }),\r\n        }))\r\n      )\r\n      .catch((err) => console.log(err))\r\n      .finally(() =>\r\n        setHeatMapData((prevState) => ({\r\n          ...prevState,\r\n          isLoading: false,\r\n        }))\r\n      );\r\n  };\r\n\r\n  if (!token) return <Navigate to=\"/\" />;\r\n\r\n  return (\r\n    <Box sx={{ p: \"10px\" }}>\r\n      <PerformanceChart\r\n        selectedCategories={selectedCategories}\r\n        setSelectedCategories={setSelectedCategories}\r\n        onSetData={onSetData}\r\n        data={data}\r\n        isLoading={data?.isLoading || HeatMapData.isLoading}\r\n      />\r\n      <Box sx={{ pb: 5 }}>\r\n        <HeatMapComponent\r\n          heatMapData={HeatMapData}\r\n          selectedCategories={selectedCategories}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import axios from \"axios\";\r\n\r\nexport const apiManager = axios.create({\r\n  baseURL: \"https://coreapi.hectorai.live/api/day-parting\",\r\n  headers: {\r\n    \"X-USER-IDENTITY\":\r\n      \"U2FsdGVkX18lreBwDMZIZaWXmCA+9GGYXAFttifVV7ovRjRGNNlnl3F8QSfmgxbGrm4zk42ud8ygR0rZccDFlOVDj01aIUTjKrX6TNza+qoIkSe0xGH0MxBlUXrV+c+ULtgFHS9XcTXbrIGbSN1Cwt18SZK5UOGF3aavkG5ZGXwOAopznMUp4CJOxE9a7DzNsb0rJpsguSXehn+Fw0b6GT30m/c0+7Nhbtwi8GFflEgr8F41hE4jMoLwCEajSkxQhTxorAqtJRF0tlM5sUeAvBODqx4sZMB8MNv9v9NzQ7cA+P+FKB6VSS9QIwRx5PC4LQnmthfupakaZmnRL1YbZ56rPbt8lu3QSRS1yuV/GwRuCN3MBwaHitsgzMYEnAMiYGup+W/nbNsukqCXhSZGtg==\",\r\n    Authorization:\r\n      \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2OGI0ZTNhN2Y1YmU4ZDY2MjVlN2I0MiIsImZ1bGxOYW1lIjoiU3lzdGVtIFRlc3QiLCJlbWFpbCI6InRlc3RAZGV2LmNvbSIsInNlc3Npb25JZCI6InJhbmRvbVN0cmluZyIsImlhdCI6MTcyMDQwNjQzNH0.oo2gUHroTcJ7X-I0-hNvtuG4tq6sGL2yr4Veaf37JPc\",\r\n  },\r\n});\r\n","import axios, { AxiosResponse } from \"axios\";\r\nimport { apiManager } from \"../utils/apiManager\";\r\nimport { oneMonthAgo, todayString } from \"../utils/dates\";\r\nimport { getPerformanceListProps } from \"../interfaces/Services.types\";\r\n\r\nexport const loginService = async ({\r\n  email,\r\n  password,\r\n  isLoggedInHere,\r\n}: {\r\n  email: string;\r\n  password: string;\r\n  isLoggedInHere: number;\r\n}): Promise<AxiosResponse> => {\r\n  const response: AxiosResponse = await axios.post(\r\n    \"https://coreapi.hectorai.live/api/auth/login\",\r\n    {\r\n      email,\r\n      password,\r\n      isLoggedInHere,\r\n    }\r\n  );\r\n  return response;\r\n};\r\n\r\nexport const getMetricsList = async (): Promise<AxiosResponse> => {\r\n  const response: AxiosResponse = await apiManager.post(\r\n    \"/DayPartingFilterList\",\r\n    {\r\n      type: \"customizeMetrics\",\r\n    }\r\n  );\r\n  return response;\r\n};\r\n\r\nexport const getPerformanceList = async ({\r\n  metrics,\r\n}: getPerformanceListProps): Promise<AxiosResponse> => {\r\n  const response: AxiosResponse = await apiManager.post(\r\n    \"/DayPartingPerformanceGraphList\",\r\n    {\r\n      startDate: oneMonthAgo,\r\n      endDate: todayString,\r\n      metrics: metrics.length > 0 ? metrics : [\"CR_perc\", \"ACOS\", \"ROAS\"],\r\n    }\r\n  );\r\n  return response;\r\n};\r\n\r\nexport const getHeatMapList = async ({\r\n  metrics,\r\n}: getPerformanceListProps): Promise<AxiosResponse> => {\r\n  const response: AxiosResponse = await apiManager.post(\"/heatmap-list\", {\r\n    startDate: oneMonthAgo,\r\n    endDate: todayString,\r\n    metrics: metrics.length > 0 ? metrics : [\"CR_perc\", \"ACOS\", \"ROAS\"],\r\n  });\r\n  return response;\r\n};\r\n"],"names":["_ref","setSelectedCategories","selectedCategories","onSetData","isLoading","anchorEl","setAnchorEl","useState","metricsList","setMetricsList","temporarySelectedCategories","setTemporarySelectedCategories","open","Boolean","useEffect","getMetricsList","then","response","_response$data","data","result","catch","err","console","log","handleClose","_jsxs","React","children","_jsx","Box","sx","display","alignItems","textAlign","IconButton","onClick","event","currentTarget","size","undefined","border","borderRadius","p","Typography","ExpandMoreOutlinedIcon","Menu","id","onClose","PaperProps","elevation","overflow","filter","mt","width","height","ml","mr","content","position","top","right","bgcolor","transform","zIndex","transformOrigin","horizontal","vertical","anchorOrigin","map","item","MenuItem","FormControlLabel","control","Checkbox","name","checked","some","selected","code","m","label","onChange","onChangeCategories","prevState","justifyContent","Button","variant","backgroundColor","color","textTransform","async","onApplyCategories","disabled","valueFormatter","v","percentageMetrics","includes","concat","toFixed","_data$series","_data$categories","context","useContext","AppContext","flexWrap","px","padding","SelectMenu","Divider","ref","appRef","LineChart","series","line","area","loading","xAxis","categories","time","getTodaysTime","scaleType","timeFormatter","disableTicks","yAxis","disableLine","value","grid","legend","hidden","strokeDasharray","strokeWidth","opacity","hexToRgb","hex","r","g","b","length","parseInt","Error","colorMapping","index","minValue","maxValue","reverse","colourPairs","maxColor","minColor","r1","g1","b1","r2","g2","b2","ratio","x","toString","join","rgbToHex","Math","round","rows","columns","SkeletonComponent","TableContainer","Table","TableRow","TableCell","colSpan","Skeleton","_data$","heatMapData","rangeDetails","_mainContentRef$curre","mainContentRef","setMainContentHeight","current","scrollHeight","Suspense","fallback","TableHead","borderBottom","align","weekday","category","TableBody","Hourly_Data","hourlyData","ind","_data$2","_data$2$Hourly_Data","_data$2$Hourly_Data$i","_Fragment","timeInAMPM","time_part","_getList","obj","Object","keys","key","_rangeDetails$key","_rangeDetails$key2","min","max","indexOf","Number","fontWeight","totalRow","flat","val","Dashboard","setData","HeatMapData","setHeatMapData","token","localStorage","getItem","getPerformanceList","metrics","finally","getHeatMapList","entries","entryItem","startsWith","entry","PerformanceChart","pb","HeatMapComponent","Navigate","to","apiManager","axios","create","baseURL","headers","Authorization","loginService","email","password","isLoggedInHere","post","type","_ref2","startDate","oneMonthAgo","endDate","todayString","_ref3"],"sourceRoot":""}